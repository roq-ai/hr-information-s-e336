generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee    employee[]
  hr_manager  hr_manager[]
}

model employee {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String     @db.Uuid
  company_id String     @db.Uuid
  position   String     @db.VarChar(255)
  start_date DateTime   @db.Timestamp(6)
  end_date   DateTime?  @db.Timestamp(6)
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  company    company    @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payroll    payroll[]
  vacation   vacation[]
}

model hr_manager {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  company_id String    @db.Uuid
  start_date DateTime  @db.Timestamp(6)
  end_date   DateTime? @db.Timestamp(6)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  company    company   @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job_positions {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  job_description     String?
  salary_range        String?  @db.VarChar(255)
  required_experience String?  @db.VarChar(255)
  job_requirements    String?
}

model payroll {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id String   @db.Uuid
  salary      Int
  bonus       Int?
  deduction   Int?
  pay_date    DateTime @db.Timestamp(6)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  company     company[]
  employee    employee[]
  hr_manager  hr_manager[]
}

model vacation {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id String   @db.Uuid
  start_date  DateTime @db.Timestamp(6)
  end_date    DateTime @db.Timestamp(6)
  status      String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
